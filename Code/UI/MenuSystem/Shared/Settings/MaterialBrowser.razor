@using System;
@using Sandbox;
@using Sandbox.UI;


<root style="flex-direction: column; pointer-events: all; width: 100%; height: 100%;">
    <div style="width: 100%; height: 20px; background-color: #464646ab">
        <TextEntry Value:bind="@SearchBind" onsubmit=@ConfirmSearch/>
    </div>
    <div style="flex-direction: row; flex-wrap: wrap; font-size: 15px; width: 100%; overflow-y: scroll;">
        @foreach(Material material in Materials)
        {
            <div onclick=@(() => Value = material.Name) style=@($"background-color: white; margin: 5px; border-radius: 20px; flex-direction: column; width: 100px; height:100px; flex-shrink: 0; {(material.Name == Value ? "border: 2px solid #3273EB;" : "border: none;")}")>
                <label style="font-family: Poppins; color: black; text-align: center; font-size: 10px; padding: 5px;">@material.ResourceName</label>
                <MaterialScenePanel style="width: 100%;height: 100%;" Material=@material/>
            </div>
        }
    </div>
</root>

 
@code
{
    string _value;
    public string Value 
    {
        get => _value ;
        set
        {
            if (_value  == value)
                return;

            _value = value;
        }
    }
    private string MaterialPath { get; set; } = "materials";
    private string SearchBind { get; set; } = "Search";
    private string Search { get; set; } = "";
    private List<Material> Materials { get; set; }

    public void ConfirmSearch()
    {
        Search = SearchBind;
        Log.Info(Search);
        Materials = GetMaterials().ToList();
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        if ( Materials is null)
        {
            Materials = GetMaterials().ToList();
            StateHasChanged();
        }
    }

    public IEnumerable<Material> GetMaterials()
    {
        var materialSearch = FileSystem.Mounted
            .FindFile( $"{MaterialPath}", "*.vmat_c", true )
            .Select( f => $"{MaterialPath}/{f}" );

        if(Search != "") materialSearch = FindCloseMatches(FileSystem.Mounted.FindFile( $"{MaterialPath}", "*.vmat_c", true ).ToList(), Search);
        else materialSearch = FileSystem.Mounted.FindFile( $"{MaterialPath}", "*.vmat_c", true ).ToList();

        var materialCount = 0;

        foreach(string s in materialSearch)
        {
            
            var trimmed = $"{MaterialPath}/{s}";
            if ( trimmed.EndsWith( "_c" ))
            {
                trimmed = trimmed.Remove(trimmed.Length-2);
            }
            
            var material = Material.Load(trimmed);
            if (material is null)
                continue;

            materialCount++;

            yield return material;
        }
        Log.Info($"Found {materialCount} materials.");
    }

    static string GetFileNameWithoutExtension(string filePath)
    {
        string fileNameWithExtension = Path.GetFileName(filePath);

        string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(fileNameWithExtension);

        return fileNameWithoutExtension;
    }

    public static List<string> FindCloseMatches(List<string> list, string searchPrompt)
    {
        return list
            .Select(item => new { Item = item, Distance = CalculateLevenshteinDistance(GetFileNameWithoutExtension(item), searchPrompt) })
            .OrderBy(x => x.Distance)
            .Select(x => x.Item)
            .ToList();
    }


    //Credit - Davidblkx
    private static int CalculateLevenshteinDistance(string source1, string source2)
    {
        var source1Length = source1.Length;
        var source2Length = source2.Length;

        var matrix = new int[source1Length + 1, source2Length + 1];

        if (source1Length == 0)
            return source2Length;

        if (source2Length == 0)
            return source1Length;

        for (var i = 0; i <= source1Length; matrix[i, 0] = i++){}
        for (var j = 0; j <= source2Length; matrix[0, j] = j++){}

        for (var i = 1; i <= source1Length; i++)
        {
            for (var j = 1; j <= source2Length; j++)
            {
                var cost = (source2[j - 1] == source1[i - 1]) ? 0 : 1;

                matrix[i, j] = Math.Min(
                    Math.Min(matrix[i - 1, j] + 1, matrix[i, j - 1] + 1),
                    matrix[i - 1, j - 1] + cost);
            }
        }

        return matrix[source1Length, source2Length];
    }

    protected override int BuildHash() => System.HashCode.Combine( Search );
}
